#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

IS_MAC_OS=""
if [[ "$OSTYPE" == darwin* ]]; then
    IS_MAC_OS=true
    xcode-select --install
fi

set -e

echo ""
echo "                       _oo0oo_"
echo "                      o8888888o"
echo "                      88' . '88"
echo "                      (| -_- |)"
echo "                      0\  =  /0"
echo "                    ___/\`---'\\___"
echo "                  .' \\\\\\|     |# '."
echo "                 / \\\\\\|||  :  |||# \\"
echo "               / _||||| -:- |||||- \\"
echo "               |   | \\\\\\\\\\  -  #/ |   |"
echo "               | \\_|  ''\\---/''  |_/ |"
echo "               \\  .-\\__  '-'  ___/-. /"
echo "             ___'. .'  /--.--\\  \`. .'___"
echo "          .'' '<  \`.___\\_<|>_/___.' >' ''."
echo "         | | :  \`- \\\`.;\`\\ _ /\`;.\`/ - \` : | |"
echo "         \\  \\ \`_.   \\_ __\\ /__ _/   .-\` /  /"
echo "     =====\`-.____\`.___ \\_____/___.-\`___.-'====="
echo "                       \`=---='"
echo ""
echo "               佛祖保佑         永無BUG"
echo ""
echo "     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo ""
echo ""

# =============== function ===============

info () {
  printf "  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

command_GetType() {
    local name="$1"
    local typeMatch=$(type -t "$name" 2>/dev/null || true)
    echo $typeMatch
}

command_Exists() {
    local name="$1"
    local typeMatch=$(command_GetType "$name")
    [[ "$typeMatch" == "alias" || "$typeMatch" == "function" || "$typeMatch" == "builtin" || "$typeMatch" == "file" ]]
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  symlink=$(find "$DOTFILES_ROOT/" -maxdepth 2 -name '*.symlink')
  for src in $symlink
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
  link_file "$DOTFILES_ROOT" "$HOME/.dotfiles"
}

chsh_zsh() {
    if [ "$TEST_CURRENT_SHELL" != "zsh" ]; then
        # If this platform provides a "chsh" command (not Cygwin), do it, man!
        if command_Exists chsh; then
            echo "Time to change your default shell to zsh!"
            sudo chsh -s "${zsh_bin}" "$(whoami)"
            # Else, suggest the user do so manually.
        else
            echo "I can't change your shell automatically because this system does not have chsh."
            echo "Please manually change your default shell to zsh!"
        fi
    fi
}

install_dot_sh() {
    if [ "$IS_MAC_OS" == true ]; then
      info "installing dependencies"
      if source bin/dot
      then
        success "dependencies installed"
      else
        fail "error installing dependencies"
      fi
    fi
}

usage() {
    echo "Usage: sh script/bootstrap -[dba]"
    echo "  -d  only install dotfiles"
    echo "  -b  only install bins, like homebrew"
    echo "  -a  install dotfiles and bins"
}
# =============== main ===============
# change shell from cshell to zsh
TEST_CURRENT_SHELL=$(expr "$SHELL" : '.*/\(.*\)')
zsh_bin=$(grep "/zsh$" /etc/shells | tail -1)
chsh_zsh

while getopts 'dba' OPT; do
    case $OPT in
        d)
            # install link files
            install_dotfiles
            break
            ;;
        b)
            # If we're on a Mac, let's install and setup homebrew and more
            install_dot_sh
            break
            ;;
        a)
            echo "a"
            install_dotfiles
            install_dot_sh
            break
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

echo ''
echo '  All installed!'

[[ -n ${zsh_bin} ]] && ${zsh_bin}
